// Mocks generated by Mockito 5.4.0 from annotations
// in twse_info_flutter/test/repo/company_repo_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:mockito/mockito.dart' as _i1;
import 'package:twse_info_flutter/data/model/dto/company_dto.dart' as _i5;
import 'package:twse_info_flutter/data/remote/data_state.dart' as _i3;
import 'package:twse_info_flutter/data/remote/serivce/company/company_service.dart'
    as _i2;

import 'company_repo_test.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCompanyService_0 extends _i1.SmartFake
    implements _i2.CompanyService {
  _FakeCompanyService_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDataState_1<T> extends _i1.SmartFake implements _i3.DataState<T> {
  _FakeDataState_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CompanyRepoTest].
///
/// See the documentation for Mockito's code generation for more information.
class MockCompanyRepoTest extends _i1.Mock implements _i4.CompanyRepoTest {
  MockCompanyRepoTest() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CompanyService get companyService => (super.noSuchMethod(
        Invocation.getter(#companyService),
        returnValue: _FakeCompanyService_0(
          this,
          Invocation.getter(#companyService),
        ),
      ) as _i2.CompanyService);
  @override
  set companyService(_i2.CompanyService? _companyService) => super.noSuchMethod(
        Invocation.setter(
          #companyService,
          _companyService,
        ),
        returnValueForMissingStub: null,
      );
  @override
  List<_i5.CompanyDto> get companies => (super.noSuchMethod(
        Invocation.getter(#companies),
        returnValue: <_i5.CompanyDto>[],
      ) as List<_i5.CompanyDto>);
  @override
  set companies(List<_i5.CompanyDto>? _companies) => super.noSuchMethod(
        Invocation.setter(
          #companies,
          _companies,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set companyMap(Map<String, _i5.CompanyDto>? _companyMap) =>
      super.noSuchMethod(
        Invocation.setter(
          #companyMap,
          _companyMap,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set industryMap(Map<String, List<_i5.CompanyDto>>? _industryMap) =>
      super.noSuchMethod(
        Invocation.setter(
          #industryMap,
          _industryMap,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i6.Future<_i3.DataState<Map<String, List<_i5.CompanyDto>>>> fetchData() =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchData,
          [],
        ),
        returnValue:
            _i6.Future<_i3.DataState<Map<String, List<_i5.CompanyDto>>>>.value(
                _FakeDataState_1<Map<String, List<_i5.CompanyDto>>>(
          this,
          Invocation.method(
            #fetchData,
            [],
          ),
        )),
      ) as _i6.Future<_i3.DataState<Map<String, List<_i5.CompanyDto>>>>);
  @override
  _i6.Future<_i3.DataState<_i5.CompanyDto>> getCompany(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCompany,
          [id],
        ),
        returnValue: _i6.Future<_i3.DataState<_i5.CompanyDto>>.value(
            _FakeDataState_1<_i5.CompanyDto>(
          this,
          Invocation.method(
            #getCompany,
            [id],
          ),
        )),
      ) as _i6.Future<_i3.DataState<_i5.CompanyDto>>);
}
